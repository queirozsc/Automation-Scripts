{
	"name": "Retornos Incremental",
	"properties": {
		"activities": [
			{
				"name": "Tasy Sadalla",
				"type": "Copy",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "OracleSource",
						"oracleReaderQuery": "SELECT \n       Obter_nome_estab(Obter_estab_atend(m.nr_atendimento))       AS \n       estabelecimento, \n       obter_cnpj_estabelecimento(Obter_estab_atend(m.nr_atendimento)) as cnpj,\n       m.nr_atendimento, \n       n.nr_prontuario, \n       m.cd_pessoa_fisica, \n       n.nm_pessoa_fisica                                          nm_paciente, \n       n.nr_tel, \n       m.cd_medico, \n       m.nm_medico, \n       n.ds_email, \n       m.nr_seq_consulta, \n       substr(to_char(obter_data_entrada(m.nr_atendimento), 'hh24:mi:ss'),1,50)as hora,\n       substr(to_char(obter_data_entrada(m.nr_atendimento),'dd/mm/yyyy'),1,50) AS data_atendimento,\n       obter_valor_dominio(12,obter_tipo_atendimento(m.nr_atendimento)) as tipo_atendimento,\n               \n       (SELECT to_char(a.dt_agenda, 'dd/mm/yyyy')\n        FROM   agenda_consulta a, \n               agenda x \n        WHERE  a.cd_agenda = x.cd_agenda \n               AND trunc(a.dt_agenda) > trunc(obter_data_entrada(m.nr_atendimento))\n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica \n               AND ROWNUM <= 1) AS \n       agendado_para_dia, \n       \n       substr((\n        SELECT to_char(a.dt_agenda, 'hh24:mi:ss')\n        FROM agenda_consulta a\n            , agenda x\n        WHERE a.cd_agenda = x.cd_agenda\n               AND trunc(a.dt_agenda) > trunc(obter_data_entrada(m.nr_atendimento))\n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica\n               AND ROWNUM <= 1),1,255) AS agendado_para_hora,\n        \n        (SELECT case when obter_tipo_agenda(a.cd_agenda) = 2 and x.cd_pessoa_fisica is null then 2\n                     when obter_tipo_agenda(a.cd_agenda) = 2 and x.cd_pessoa_fisica is not null then 3\n                     when obter_tipo_agenda(a.cd_agenda) = 1 then 1 end tipo_agenda\n                                  \n        FROM agenda_paciente a\n            , agenda x\n        WHERE a.cd_agenda = x.cd_agenda\n            AND a.dt_agenda > obter_data_entrada(m.nr_atendimento)\n            AND a.cd_pessoa_fisica = m.cd_pessoa_fisica\n            AND ROWNUM <= 1\n            AND a.dt_agenda <> obter_data_entrada(m.nr_atendimento)\n        ) AS tipo_agenda,\n        \n        (select o.ds_retorno from oft_retorno o where o.nr_sequencia = m.nr_seq_retorno) AS retorno_em, \n       \n       (SELECT a.nm_usuario_orig \n        FROM   agenda_paciente a, \n               agenda x \n        WHERE  a.cd_agenda = x.cd_agenda \n               AND a.dt_agenda > Obter_data_entrada(m.nr_atendimento) \n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica \n               AND Obter_tipo_agenda(a.cd_agenda) = 2 \n               AND ROWNUM <= 1)                                    AS usuario, \n               \n       (SELECT Listagg(Obter_desc_procedimento(b.cd_procedimento, \n                       b.ie_origem_proced) \n                       || ' Quantidade = ' \n                       || b.qt_exame, ' ;') \n                 within GROUP (ORDER BY \n                 Obter_desc_procedimento(b.cd_procedimento, \n                 b.ie_origem_proced)) \n        FROM   pedido_exame_externo_item b \n               inner join proc_interno c \n                       ON c.nr_sequencia = b.nr_proc_interno \n               inner join pedido_exame_externo c \n                       ON c.nr_sequencia = b.nr_seq_pedido \n        WHERE  c.nr_seq_consulta = m.nr_seq_consulta \n               AND c.ie_situacao = 'A')                            AS \n       procedimentos,\n       '' SIGLA_UNIDADE,\n       '' MARCA\nFROM   (SELECT a.nr_atendimento, \n               obter_pessoa_atendimento(a.nr_atendimento, 'C') as cd_pessoa_fisica, \n               a.cd_profissional as cd_medico, \n               Obter_nome_pf(a.cd_profissional) nm_medico, \n               a.nr_sequencia             nr_seq_consulta, \n               obter_estab_atend(a.nr_atendimento) as cd_estabelecimento,\n               a.nr_seq_retorno\n        FROM   oft_consulta_medica a \n                                     ) m \n       inner join (SELECT cd_pessoa_fisica, \n                          nm_pessoa_fisica, \n                          Nvl(Nvl(nr_cel, nr_cel2), nr_tel) nr_tel, \n                          nr_prontuario, \n                          ds_email \n                   FROM   (SELECT x.cd_pessoa_fisica, \n                                  Initcap(x.nm_pessoa_fisica) \n                                          nm_pessoa_fisica, \n                                  x.nr_prontuario, \nRegexp_replace(Regexp_replace(x.nr_telefone_celular, \n               '[^[:digit:]]'), \nDecode( \nLength(Regexp_replace(x.nr_telefone_celular, \n       '[^[:digit:]]')), 8 \n, \nds_reg_8, \n9, \nds_reg_9, \n10, \nds_reg_10, \nds_reg_11) \n, \nDecode(Length(Regexp_replace(x.nr_telefone_celular, \n              '[^[:digit:]]')), 8, \nds_for_8 \n, \n9, \nds_for_9, \n10 \n        , \nds_for_10, \nds_for_11) \n) \n        nr_cel, \nRegexp_replace(Regexp_replace(y.nr_telefone_celular, \n               '[^[:digit:]]'), \nDecode( \nLength(Regexp_replace(y.nr_telefone_celular, \n       '[^[:digit:]]')), 8 \n, \nds_reg_8, \n9, \nds_reg_9, \n10, \nds_reg_10, \nds_reg_11) \n, \nDecode(Length(Regexp_replace(y.nr_telefone_celular, \n              '[^[:digit:]]')), 8, \nds_for_8 \n, \n9, \nds_for_9, \n10 \n        , \nds_for_10, \nds_for_11) \n) \n        nr_cel2, \nRegexp_replace(Regexp_replace(y.nr_telefone, \n               '[^[:digit:]]'), \nDecode(Length(Regexp_replace(y.nr_telefone, \n              '[^[:digit:]]')), 8, \nds_reg_8, \n9, ds_reg_9, \n10, ds_reg_10, \nds_reg_11), \nDecode(Length(Regexp_replace(y.nr_telefone, \n              '[^[:digit:]]')), 8, \nds_for_8, \n9, \nds_for_9, \n10 \n, \nds_for_10, \nds_for_11) \n        ) nr_tel, \ny.ds_email \nFROM   pessoa_fisica x \nleft join compl_pessoa_fisica y \n       ON y.cd_pessoa_fisica = x.cd_pessoa_fisica \n          AND y.ie_tipo_complemento = 1, \n(SELECT '([0-9]{4})([0-9]{4})'           ds_reg_8, \n        '\\1-\\2'                          ds_for_8, \n        '([0-9]{5})([0-9]{4})'           ds_reg_9, \n        '\\1-\\2'                          ds_for_9, \n        '([0-9]{2})([0-9]{4})([0-9]{4})' ds_reg_10, \n        '(\\1) \\2-\\3'                     ds_for_10, \n        '([0-9]{2})([0-9]{5})([0-9]{4})' ds_reg_11, \n        '(\\1) \\2-\\3'                     ds_for_11 \n FROM   dual) z \nWHERE  x.nr_telefone_celular IS NOT NULL \n OR y.nr_telefone_celular IS NOT NULL \n OR y.nr_telefone IS NOT NULL)) n \nON n.cd_pessoa_fisica = m.cd_pessoa_fisica \nWHERE  NOT EXISTS (SELECT a.dt_agenda, \n                          a.cd_pessoa_fisica \n                   FROM   agenda_consulta a \n                   where a.cd_pessoa_fisica = m.cd_pessoa_fisica\n                          AND a.dt_agenda > SYSDATE) \nAND ROWNUM < 50",
						"partitionOption": "None"
					},
					"sink": {
						"type": "OracleSink",
						"writeBatchSize": 10000
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "SadallaTasyPrdDataSet",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "SadallaTasyPrdDataSet",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "ALTERA AGENDAS",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Tasy Sadalla",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Tasy HTML5",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[sp_ALTERTIPOAGENDAS]",
					"storedProcedureParameters": {
						"FIELDNAME_DEST": {
							"value": "TIPO_AGENDA",
							"type": "String"
						},
						"FIELDNAME_ORIG": {
							"value": "TIPO_AGENDA",
							"type": "String"
						},
						"TABLENAME": {
							"value": "Oft_Consulta_Retorno_Increment_temp",
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "ALTERA_MARCA",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "ALTERA AGENDAS",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "sp_UPDATETRADEMARKV2",
					"storedProcedureParameters": {
						"CNPJ_FIELDNAME": {
							"value": "CNPJ",
							"type": "String"
						},
						"INITIALS_FIELDNAME": {
							"value": "SIGLA_UNIDADE",
							"type": "String"
						},
						"MARK_FIELDNAME": {
							"value": "MARCA",
							"type": "String"
						},
						"TABLENAME": {
							"value": "Oft_Consulta_Retorno_Increment_temp",
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Temp_para_Tabela",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "ALTERA_MARCA",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[INSERTNEWRETURNS]"
				},
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Tasy HTML5",
				"type": "Copy",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "OracleSource",
						"oracleReaderQuery": "SELECT \n       Obter_nome_estab(Obter_estab_atend(m.nr_atendimento)) AS \n       estabelecimento, \n       m.nr_atendimento, \n       n.nr_prontuario, \n       m.cd_pessoa_fisica, \n       n.nm_pessoa_fisica  nm_paciente, \n       n.nr_tel, \n       m.cd_medico, \n       m.nm_medico, \n       n.ds_email, \n       m.nr_seq_consulta, \n       substr(to_char(obter_data_entrada(m.nr_atendimento), 'hh24:mi:ss'),1,50)as hora,\n       substr(to_char(obter_data_entrada(m.nr_atendimento),'dd/mm/yyyy'),1,50) AS data_atendimento,\n       obter_valor_dominio(12,obter_tipo_atendimento(m.nr_atendimento)) as tipo_atendimento,\n       \n       substr((SELECT to_char(a.dt_agenda,'dd/mm/yyyy')\n        FROM   agenda_paciente a, \n               agenda x \n        WHERE  a.cd_agenda = x.cd_agenda \n               AND a.dt_agenda > Obter_data_entrada(m.nr_atendimento) \n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica \n               AND Obter_tipo_agenda(a.cd_agenda) = 2 \n               AND ROWNUM <= 1),1,50)                                  AS \n       agendado_para_dia, \n       \n       substr((\n        SELECT to_char(a.hr_inicio, 'hh24:mi:ss')\n        FROM agenda_paciente a\n            , agenda x\n        WHERE a.cd_agenda = x.cd_agenda\n               AND a.dt_agenda > obter_data_entrada(m.nr_atendimento)\n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica\n               AND ROWNUM <= 1\n        ),1,50) AS agendado_para_hora,\n        \n        (SELECT case when obter_tipo_agenda(a.cd_agenda) = 2 and x.cd_pessoa_fisica is null then 2\n                     when obter_tipo_agenda(a.cd_agenda) = 2 and x.cd_pessoa_fisica is not null then 3\n                     when obter_tipo_agenda(a.cd_agenda) = 1 then 1 end tipo_agenda\n                                  \n        FROM agenda_paciente a\n            , agenda x\n        WHERE a.cd_agenda = x.cd_agenda\n            AND a.dt_agenda > obter_data_entrada(m.nr_atendimento)\n            AND a.cd_pessoa_fisica = m.cd_pessoa_fisica\n            AND ROWNUM <= 1\n            AND a.dt_agenda <> obter_data_entrada(m.nr_atendimento)\n        ) AS tipo_agenda,\n        \n        (SELECT 'Retorno em ' \n               || Lpad(a.qt_periodo, 2, '0') \n               || Decode(a.ie_periodo, 'D', ' Dias', \n                                       a.ie_periodo) ds_periodo \n        FROM   oft_conduta a \n        WHERE  a.nr_seq_consulta = m.nr_seq_consulta \n               AND a.dt_inativacao IS NULL \n               AND a.ie_situacao = 'A' \n               AND a.nr_sequencia = (SELECT Max(nr_sequencia) \n                                     FROM   oft_conduta \n                                     WHERE  nr_seq_consulta = a.nr_seq_consulta) \n        AND a.qt_periodo IS NOT NULL)                       AS retorno_em, \n       \n       (SELECT a.nm_usuario_orig \n        FROM   agenda_paciente a, \n               agenda x \n        WHERE  a.cd_agenda = x.cd_agenda \n               AND a.dt_agenda > Obter_data_entrada(m.nr_atendimento) \n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica \n               AND Obter_tipo_agenda(a.cd_agenda) = 2 \n               AND ROWNUM <= 1)                                    AS usuario, \n               \n       substr((SELECT Listagg(Obter_desc_procedimento(b.cd_procedimento, \n                       b.ie_origem_proced) \n                       || ' Quantidade = ' \n                       || b.qt_exame, ' ;') \n                 within GROUP (ORDER BY \n                 Obter_desc_procedimento(b.cd_procedimento, \n                 b.ie_origem_proced)) \n        FROM   pedido_exame_externo_item b \n               inner join proc_interno c \n                       ON c.nr_sequencia = b.nr_proc_interno \n               inner join pedido_exame_externo c \n                       ON c.nr_sequencia = b.nr_seq_pedido \n        WHERE  c.nr_seq_consulta = m.nr_seq_consulta \n               AND c.ie_situacao = 'A'),1,1000)                        AS \n       procedimentos,\n       '' SIGLA_UNIDADE,\n       '' MARCA\nFROM   (SELECT a.nr_atendimento, \n               a.cd_pessoa_fisica, \n               a.cd_medico, \n               Obter_nome_pf(a.cd_medico) nm_medico, \n               a.nr_sequencia             nr_seq_consulta, \n               a.cd_estabelecimento \n        FROM   oft_consulta a \n        UNION \n        SELECT a.nr_atendimento, \n               a.cd_pessoa_fisica, \n               a.cd_medico, \n               Obter_nome_pf(a.cd_medico) nm_medico, \n               a.nr_sequencia             nr_seq_consulta, \n               a.cd_estabelecimento \n        FROM   oft_consulta a \n               left join (SELECT Count(1) nr_conduta, \n                                 nr_seq_consulta \n                          FROM   oft_conduta \n                          GROUP  BY nr_seq_consulta) b \n                      ON b.nr_seq_consulta = a.nr_sequencia \n               left join (SELECT a.nr_seq_consulta, \n                                 Count(1) nr_encaminhamento \n                          FROM   med_avaliacao_paciente a \n                                 inner join med_avaliacao_result b \n                                         ON b.nr_seq_avaliacao = a.nr_sequencia \n                          WHERE  a.nr_seq_tipo_avaliacao = 34 \n                                 AND b.nr_seq_item IN ( 456, 457, 458 ) \n                          GROUP  BY a.nr_seq_consulta) c \n                      ON c.nr_seq_consulta = a.nr_sequencia \n               left join (SELECT nr_seq_consulta, \n                                 Count(1) nr_procedimento \n                          FROM   pedido_exame_externo \n                          WHERE  ie_situacao = 'A' \n                          GROUP  BY nr_seq_consulta) d \n                      ON d.nr_seq_consulta = a.nr_sequencia \n               AND ( ( Nvl(b.nr_conduta, 0) > 0 ) \n                      OR ( Nvl(c.nr_encaminhamento, 0) > 0 ) \n                      OR ( Nvl(d.nr_procedimento, 0) > 0 ) )) m \n       inner join (SELECT cd_pessoa_fisica, \n                          nm_pessoa_fisica, \n                          Nvl(Nvl(nr_cel, nr_cel2), nr_tel) nr_tel, \n                          nr_prontuario, \n                          ds_email \n                   FROM   (SELECT x.cd_pessoa_fisica, \n                                  Initcap(x.nm_pessoa_fisica) \n                                          nm_pessoa_fisica, \n                                  x.nr_prontuario, \nRegexp_replace(Regexp_replace(x.nr_telefone_celular, \n               '[^[:digit:]]'), \nDecode( \nLength(Regexp_replace(x.nr_telefone_celular, \n       '[^[:digit:]]')), 8 \n, \nds_reg_8, \n9, \nds_reg_9, \n10, \nds_reg_10, \nds_reg_11) \n, \nDecode(Length(Regexp_replace(x.nr_telefone_celular, \n              '[^[:digit:]]')), 8, \nds_for_8 \n, \n9, \nds_for_9, \n10 \n        , \nds_for_10, \nds_for_11) \n) \n        nr_cel, \nRegexp_replace(Regexp_replace(y.nr_telefone_celular, \n               '[^[:digit:]]'), \nDecode( \nLength(Regexp_replace(y.nr_telefone_celular, \n       '[^[:digit:]]')), 8 \n, \nds_reg_8, \n9, \nds_reg_9, \n10, \nds_reg_10, \nds_reg_11) \n, \nDecode(Length(Regexp_replace(y.nr_telefone_celular, \n              '[^[:digit:]]')), 8, \nds_for_8 \n, \n9, \nds_for_9, \n10 \n        , \nds_for_10, \nds_for_11) \n) \n        nr_cel2, \nRegexp_replace(Regexp_replace(y.nr_telefone, \n               '[^[:digit:]]'), \nDecode(Length(Regexp_replace(y.nr_telefone, \n              '[^[:digit:]]')), 8, \nds_reg_8, \n9, ds_reg_9, \n10, ds_reg_10, \nds_reg_11), \nDecode(Length(Regexp_replace(y.nr_telefone, \n              '[^[:digit:]]')), 8, \nds_for_8, \n9, \nds_for_9, \n10 \n, \nds_for_10, \nds_for_11) \n        ) nr_tel, \ny.ds_email \nFROM   pessoa_fisica x \nleft join compl_pessoa_fisica y \n       ON y.cd_pessoa_fisica = x.cd_pessoa_fisica \n          AND y.ie_tipo_complemento = 1, \n(SELECT '([0-9]{4})([0-9]{4})'           ds_reg_8, \n        '\\1-\\2'                          ds_for_8, \n        '([0-9]{5})([0-9]{4})'           ds_reg_9, \n        '\\1-\\2'                          ds_for_9, \n        '([0-9]{2})([0-9]{4})([0-9]{4})' ds_reg_10, \n        '(\\1) \\2-\\3'                     ds_for_10, \n        '([0-9]{2})([0-9]{5})([0-9]{4})' ds_reg_11, \n        '(\\1) \\2-\\3'                     ds_for_11 \n FROM   dual) z \nWHERE  x.nr_telefone_celular IS NOT NULL \n OR y.nr_telefone_celular IS NOT NULL\n OR y.nr_telefone IS NOT NULL)) n \nON n.cd_pessoa_fisica = m.cd_pessoa_fisica \nWHERE  NOT EXISTS (SELECT a.dt_agenda, \n                          a.cd_pessoa_fisica \n                   FROM   agenda_paciente a \n                   WHERE  Obter_tipo_agenda(a.cd_agenda) = 2 \n                          AND a.cd_pessoa_fisica = m.cd_pessoa_fisica)\nAND ROWNUM < 50",
						"partitionOption": "None"
					},
					"sink": {
						"type": "OracleSink",
						"writeBatchSize": 10000
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "CloudTasyPrdDataSet",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "CloudTasyPrdDataSet",
						"type": "DatasetReference"
					}
				]
			}
		],
		"folder": {
			"name": "Atendimento/Retornos"
		},
		"annotations": []
	}
}