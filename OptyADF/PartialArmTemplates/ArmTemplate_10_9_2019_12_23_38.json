{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "OptyADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Chamados Requestia')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Clear tables",
						"description": "Truncate all Requestia's tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_TRUNCATEREQUESTS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Check request file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Clear tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_REQUESTS",
								"type": "DatasetReference"
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Requests file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check request file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check request file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send requests failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Requestia\\REQUESTS não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\REQUESTS não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy requests",
									"description": "Copy requests data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "REQUEST",
														"type": "String"
													},
													"sink": {
														"name": "REQUEST",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CLIENT",
														"type": "String"
													},
													"sink": {
														"name": "CLIENT"
													}
												},
												{
													"source": {
														"name": "OPENDATE",
														"type": "String"
													},
													"sink": {
														"name": "OPENDATE"
													}
												},
												{
													"source": {
														"name": "CLOSEDATE",
														"type": "String"
													},
													"sink": {
														"name": "CLOSEDATE"
													}
												},
												{
													"source": {
														"name": "LASTACTION",
														"type": "String"
													},
													"sink": {
														"name": "LASTACTION"
													}
												},
												{
													"source": {
														"name": "LASTANALYST",
														"type": "String"
													},
													"sink": {
														"name": "LASTANALYST"
													}
												},
												{
													"source": {
														"name": "LASTREOPEN",
														"type": "String"
													},
													"sink": {
														"name": "LASTREOPEN"
													}
												},
												{
													"source": {
														"name": "RESLREMAINS",
														"type": "String"
													},
													"sink": {
														"name": "RESLREMAINS"
													}
												},
												{
													"source": {
														"name": "RESPMINS",
														"type": "String"
													},
													"sink": {
														"name": "RESPMINS"
													}
												},
												{
													"source": {
														"name": "RESLMINS",
														"type": "String"
													},
													"sink": {
														"name": "RESLMINS"
													}
												},
												{
													"source": {
														"name": "CLOSED",
														"type": "String"
													},
													"sink": {
														"name": "CLOSED"
													}
												},
												{
													"source": {
														"name": "ORIGANAL",
														"type": "String"
													},
													"sink": {
														"name": "ORIGANAL"
													}
												},
												{
													"source": {
														"name": "CURRANAL",
														"type": "String"
													},
													"sink": {
														"name": "CURRANAL"
													}
												},
												{
													"source": {
														"name": "GROUPANAL",
														"type": "String"
													},
													"sink": {
														"name": "GROUPANAL"
													}
												},
												{
													"source": {
														"name": "LASTANAL",
														"type": "String"
													},
													"sink": {
														"name": "LASTANAL"
													}
												},
												{
													"source": {
														"name": "LASTANLGRP",
														"type": "String"
													},
													"sink": {
														"name": "LASTANLGRP"
													}
												},
												{
													"source": {
														"name": "ORIGGROUP",
														"type": "String"
													},
													"sink": {
														"name": "ORIGGROUP"
													}
												},
												{
													"source": {
														"name": "CURRGROUP",
														"type": "String"
													},
													"sink": {
														"name": "CURRGROUP"
													}
												},
												{
													"source": {
														"name": "LASTGROUP",
														"type": "String"
													},
													"sink": {
														"name": "LASTGROUP"
													}
												},
												{
													"source": {
														"name": "CATEGORY",
														"type": "String"
													},
													"sink": {
														"name": "CATEGORY"
													}
												},
												{
													"source": {
														"name": "PRODUCT",
														"type": "String"
													},
													"sink": {
														"name": "PRODUCT"
													}
												},
												{
													"source": {
														"name": "PROCESS",
														"type": "String"
													},
													"sink": {
														"name": "PROCESS"
													}
												},
												{
													"source": {
														"name": "RSTATUS",
														"type": "String"
													},
													"sink": {
														"name": "RSTATUS"
													}
												},
												{
													"source": {
														"name": "RPRIORITY",
														"type": "String"
													},
													"sink": {
														"name": "RPRIORITY"
													}
												},
												{
													"source": {
														"name": "REQTYPE",
														"type": "String"
													},
													"sink": {
														"name": "REQTYPE"
													}
												},
												{
													"source": {
														"name": "REQSOURCE",
														"type": "String"
													},
													"sink": {
														"name": "REQSOURCE"
													}
												},
												{
													"source": {
														"name": "LOCATION",
														"type": "String"
													},
													"sink": {
														"name": "REQLOCATION"
													}
												},
												{
													"source": {
														"name": "ORGUNIT",
														"type": "String"
													},
													"sink": {
														"name": "ORGUNIT"
													}
												},
												{
													"source": {
														"name": "ORGUNIT_ROOT",
														"type": "String"
													},
													"sink": {
														"name": "ORGUNIT_ROOT"
													}
												},
												{
													"source": {
														"name": "ABSTRACT",
														"type": "String"
													},
													"sink": {
														"name": "ABSTRACT"
													}
												},
												{
													"source": {
														"name": "DESCRIPT",
														"type": "String"
													},
													"sink": {
														"name": "DESCRIPT"
													}
												},
												{
													"source": {
														"name": "LASTSTATUS",
														"type": "String"
													},
													"sink": {
														"name": "LASTSTATUS"
													}
												},
												{
													"source": {
														"name": "LASTPRIORITY",
														"type": "String"
													},
													"sink": {
														"name": "LASTPRIORITY"
													}
												},
												{
													"source": {
														"name": "LASTACTIONATEND",
														"type": "String"
													},
													"sink": {
														"name": "LASTACTIONATEND"
													}
												},
												{
													"source": {
														"name": "RESPDATE",
														"type": "String"
													},
													"sink": {
														"name": "RESPDATE"
													}
												},
												{
													"source": {
														"name": "RESPTIME",
														"type": "String"
													},
													"sink": {
														"name": "RESPTIME"
													}
												},
												{
													"source": {
														"name": "RESLTIME",
														"type": "String"
													},
													"sink": {
														"name": "RESLTIME"
													}
												},
												{
													"source": {
														"name": "RESPREMAINS"
													},
													"sink": {
														"name": "RESPREMAINS"
													}
												},
												{
													"source": {
														"name": "RESPMODE",
														"type": "String"
													},
													"sink": {
														"name": "RESPMODE"
													}
												},
												{
													"source": {
														"name": "RESLMODE",
														"type": "String"
													},
													"sink": {
														"name": "RESLMODE"
													}
												},
												{
													"source": {
														"name": "NOCOMPUTE",
														"type": "String"
													},
													"sink": {
														"name": "NOCOMPUTE"
													}
												},
												{
													"source": {
														"name": "APROVANLTYPE",
														"type": "String"
													},
													"sink": {
														"name": "APROVANLTYPE"
													}
												},
												{
													"source": {
														"name": "APROVCLITYPE",
														"type": "String"
													},
													"sink": {
														"name": "APROVCLITYPE"
													}
												},
												{
													"source": {
														"name": "MLEVELAPROV",
														"type": "String"
													},
													"sink": {
														"name": "MLEVELAPROV"
													}
												},
												{
													"source": {
														"name": "CLIENTAPROV",
														"type": "String"
													},
													"sink": {
														"name": "CLIENTAPROV"
													}
												},
												{
													"source": {
														"name": "PACKAGE",
														"type": "String"
													},
													"sink": {
														"name": "PACKAGE"
													}
												},
												{
													"source": {
														"name": "WORKFLOW",
														"type": "String"
													},
													"sink": {
														"name": "WORKFLOW"
													}
												},
												{
													"source": {
														"name": "LASTSEVENT",
														"type": "String"
													},
													"sink": {
														"name": "LASTSEVENT"
													}
												},
												{
													"source": {
														"name": "REQWORKFLOW",
														"type": "String"
													},
													"sink": {
														"name": "REQWORKFLOW"
													}
												},
												{
													"source": {
														"name": "ORIGCATEGORY",
														"type": "String"
													},
													"sink": {
														"name": "ORIGCATEGORY"
													}
												},
												{
													"source": {
														"name": "ORIGPRODUCT",
														"type": "String"
													},
													"sink": {
														"name": "ORIGPRODUCT"
													}
												},
												{
													"source": {
														"name": "ORIGPROCESS",
														"type": "String"
													},
													"sink": {
														"name": "ORIGPROCESS"
													}
												},
												{
													"source": {
														"name": "TOTALATTACH",
														"type": "String"
													},
													"sink": {
														"name": "TOTALATTACH"
													}
												},
												{
													"source": {
														"name": "TOTALATTACHACT",
														"type": "String"
													},
													"sink": {
														"name": "TOTALATTACHACT"
													}
												},
												{
													"source": {
														"name": "INSERTDATE",
														"type": "String"
													},
													"sink": {
														"name": "INSERTDATE"
													}
												},
												{
													"source": {
														"name": "QFORM",
														"type": "String"
													},
													"sink": {
														"name": "QFORM"
													}
												},
												{
													"source": {
														"name": "QSURVEY",
														"type": "String"
													},
													"sink": {
														"name": "QSURVEY"
													}
												},
												{
													"source": {
														"name": "QSESSIONFORM",
														"type": "String"
													},
													"sink": {
														"name": "QSESSIONFORM"
													}
												},
												{
													"source": {
														"name": "QSESSIONSURVEY",
														"type": "String"
													},
													"sink": {
														"name": "QSESSIONSURVEY"
													}
												},
												{
													"source": {
														"name": "REQUESTFLAGS",
														"type": "String"
													},
													"sink": {
														"name": "REQUESTFLAGS"
													}
												},
												{
													"source": {
														"name": "V_ASSOCIATION",
														"type": "String"
													},
													"sink": {
														"name": "V_ASSOCIATION"
													}
												},
												{
													"source": {
														"name": "V_HAS_APPROVER",
														"type": "String"
													},
													"sink": {
														"name": "V_HAS_APPROVER"
													}
												},
												{
													"source": {
														"name": "LASTSEQUENCE",
														"type": "String"
													},
													"sink": {
														"name": "LASTSEQUENCE"
													}
												},
												{
													"source": {
														"name": "LASTRECALCDATE",
														"type": "String"
													},
													"sink": {
														"name": "LASTRECALCDATE"
													}
												},
												{
													"source": {
														"name": "LASTAPPROVCNTX",
														"type": "String"
													},
													"sink": {
														"name": "LASTAPPROVCNTX"
													}
												},
												{
													"source": {
														"name": "LASTAPPROVUSER",
														"type": "String"
													},
													"sink": {
														"name": "LASTAPPROVUSER"
													}
												},
												{
													"source": {
														"name": "LASTAPPROVCODE",
														"type": "String"
													},
													"sink": {
														"name": "LASTAPPROVCODE"
													}
												},
												{
													"source": {
														"name": "CURRAPPROVCODE",
														"type": "String"
													},
													"sink": {
														"name": "CURRAPPROVCODE"
													}
												},
												{
													"source": {
														"name": "ORIGNOCOMPUTE",
														"type": "String"
													},
													"sink": {
														"name": "ORIGNOCOMPUTE"
													}
												},
												{
													"source": {
														"name": "ORIGRSTATUS",
														"type": "String"
													},
													"sink": {
														"name": "ORIGRSTATUS"
													}
												},
												{
													"source": {
														"name": "ORIGRPRIORITY",
														"type": "String"
													},
													"sink": {
														"name": "ORIGRPRIORITY"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_REQUESTS",
											"type": "DatasetReference"
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_REQUESTS",
											"type": "DatasetReference"
										}
									]
								},
								{
									"name": "Calculate fields",
									"description": "Update calculated fields (for example, SLA formula, datetime conversions, business hours difference) for time saving in queries",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy requests",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_CALCULATEREQUESTS]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Check sessions file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Clear tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_QSESSION",
								"type": "DatasetReference"
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Sessions file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check sessions file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check sessions file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send session failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Requestia\\QSESSION não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\QSESSION não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy sessions",
									"description": "Copy sessions data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "QSESSION",
														"type": "String"
													},
													"sink": {
														"name": "QSESSION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QSESSIONTITLE",
														"type": "String"
													},
													"sink": {
														"name": "QSESSIONTITLE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QCLIENT",
														"type": "String"
													},
													"sink": {
														"name": "QCLIENT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QFORM",
														"type": "String"
													},
													"sink": {
														"name": "QFORM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QVERSION",
														"type": "String"
													},
													"sink": {
														"name": "QVERSION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QSTATUS",
														"type": "String"
													},
													"sink": {
														"name": "QSTATUS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWERDATE",
														"type": "String"
													},
													"sink": {
														"name": "QANSWERDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QEXPDATE",
														"type": "String"
													},
													"sink": {
														"name": "QEXPDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QAPPLICATION",
														"type": "String"
													},
													"sink": {
														"name": "QAPPLICATION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QSURVEYTYPE",
														"type": "String"
													},
													"sink": {
														"name": "QSURVEYTYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "REQLOCATION",
														"type": "String"
													},
													"sink": {
														"name": "REQLOCATION",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_QSESSION",
											"type": "DatasetReference"
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_QSESSION",
											"type": "DatasetReference"
										}
									]
								}
							]
						}
					},
					{
						"name": "Check answers file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Clear tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_QANSWER",
								"type": "DatasetReference"
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Answers file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check answers file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check answers file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send answers failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Requestia\\QANSWER não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\QANSWER não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy answers",
									"description": "Copy answers data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "QSESSION",
														"type": "String"
													},
													"sink": {
														"name": "QSESSION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QUESTION",
														"type": "String"
													},
													"sink": {
														"name": "QUESTION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWER",
														"type": "String"
													},
													"sink": {
														"name": "QANSWER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWERED",
														"type": "String"
													},
													"sink": {
														"name": "QANSWERED",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWERDATE",
														"type": "String"
													},
													"sink": {
														"name": "QANSWERDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QSHOW",
														"type": "String"
													},
													"sink": {
														"name": "QSHOW",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QORDER",
														"type": "String"
													},
													"sink": {
														"name": "QORDER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QUPDATED",
														"type": "String"
													},
													"sink": {
														"name": "QUPDATED",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_QANSWER",
											"type": "DatasetReference"
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_QANSWER",
											"type": "DatasetReference"
										}
									]
								},
								{
									"name": "Update clients",
									"description": "Transport [UNIDADE ATENDIMENTO] field from answers table to requests table, for time saving in queries",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy answers",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_UPDATEREQUESTCLIENT]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Check table answers file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Clear tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_QTABLEANSWER",
								"type": "DatasetReference"
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Table answers file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check table answers file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check table answers file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send table answer failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Requestia\\QTABLEANSWER não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\QTABLEANSWER não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy table answers",
									"description": "Copy anwers table data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "QSESSION",
														"type": "String"
													},
													"sink": {
														"name": "QSESSION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TABLE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "TABLE_NAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TABLE_ROWID",
														"type": "String"
													},
													"sink": {
														"name": "TABLE_ROWID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TABLE_ROWNUM",
														"type": "String"
													},
													"sink": {
														"name": "TABLE_ROWNUM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_NAME",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_NAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_VALUE",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_VALUE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_POSITION",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_POSITION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_ANSWERED",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_ANSWERED",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_ANSWERDATE",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_ANSWERDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_UPDATED",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_UPDATED",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_VISIBLE",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_VISIBLE",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_QTABLEANSWER",
											"type": "DatasetReference"
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_QTABLEANSWER",
											"type": "DatasetReference"
										}
									]
								}
							]
						}
					}
				],
				"folder": {
					"name": "Apoio"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Retornos HOB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Altera Agendas",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Tasy HTML5",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERTIPOAGENDAS]",
							"storedProcedureParameters": {
								"FIELDNAME_DEST": {
									"value": "TIPO_AGENDA",
									"type": "String"
								},
								"FIELDNAME_ORIG": {
									"value": "TIPO_AGENDA",
									"type": "String"
								},
								"TABLENAME": {
									"value": "Oft_Consulta_Retorno_Increment",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Tasy HTML5",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT Obter_nome_estab(Obter_estab_atend(m.nr_atendimento)) AS estabelecimento, \n       Obter_cnpj_estabelecimento(Obter_estab_atend(m.nr_atendimento)) \n       AS cnpj, \n       m.nr_atendimento, \n       n.nr_prontuario, \n       m.cd_pessoa_fisica, \n       n.nm_pessoa_fisica nm_paciente, \n       replace(LTRIM(translate(n.nr_tel, translate(n.nr_tel, '1234567890', ' ') , ' ')),' ','') as NR_TEL,\n       replace(LTRIM(translate(n.nr_cel, translate(n.nr_cel, '1234567890', ' ') , ' ')),' ','') as NR_CEL,\n       replace(LTRIM(translate(n.nr_cel2, translate(n.nr_cel2, '1234567890', ' ') , ' ')),' ','') as NR_CEL2,\n       m.cd_medico, \n       m.nm_medico, \n       n.ds_email, \n       m.nr_seq_consulta, \n       Substr(To_char(Obter_data_entrada(m.nr_atendimento), 'hh24:mi:ss'), 1, 50 ) AS hora, \n       Substr(To_char(Obter_data_entrada(m.nr_atendimento), 'dd/mm/yyyy'), 1, 50 ) AS data_atendimento, \n       Obter_valor_dominio(12, Obter_tipo_atendimento(m.nr_atendimento)) AS tipo_atendimento, \n       Substr((SELECT To_char(a.dt_agenda, 'dd/mm/yyyy') \n               FROM   agenda_paciente a, \n                      agenda x \n               WHERE  a.cd_agenda = x.cd_agenda \n                      AND a.dt_agenda > Obter_data_entrada(m.nr_atendimento) \n                      AND a.cd_pessoa_fisica = m.cd_pessoa_fisica \n                      AND Obter_tipo_agenda(a.cd_agenda) = 2 \n                      AND ROWNUM <= 1), 1, 50) AS agendado_para_dia, \n       Substr((SELECT To_char(a.hr_inicio, 'hh24:mi:ss') \n               FROM   agenda_paciente a, \n                      agenda x \n               WHERE  a.cd_agenda = x.cd_agenda \n                      AND a.dt_agenda > Obter_data_entrada(m.nr_atendimento) \n                      AND a.cd_pessoa_fisica = m.cd_pessoa_fisica \n                      AND ROWNUM <= 1), 1, 50) AS agendado_para_hora, \n       (SELECT CASE \n                 WHEN Obter_tipo_agenda(a.cd_agenda) = 2 \n                      AND x.cd_pessoa_fisica IS NULL THEN 2 \n                 WHEN Obter_tipo_agenda(a.cd_agenda) = 2 \n                      AND x.cd_pessoa_fisica IS NOT NULL THEN 3 \n                 WHEN Obter_tipo_agenda(a.cd_agenda) = 1 THEN 1 \n               END tipo_agenda \n        FROM   agenda_paciente a, \n               agenda x \n        WHERE  a.cd_agenda = x.cd_agenda \n               AND a.dt_agenda > Obter_data_entrada(m.nr_atendimento) \n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica \n               AND ROWNUM <= 1 \n               AND a.dt_agenda <> Obter_data_entrada(m.nr_atendimento)) AS tipo_agenda, \n       (SELECT 'Retorno em ' \n               || Lpad(a.qt_periodo, 2, '0') \n               || Decode(a.ie_periodo, 'D', ' Dias', \n                                       a.ie_periodo) ds_periodo \n        FROM   oft_conduta a \n        WHERE  a.nr_seq_consulta = m.nr_seq_consulta \n               AND a.dt_inativacao IS NULL \n               AND a.ie_situacao = 'A' \n               AND a.nr_sequencia = (SELECT Max(nr_sequencia) \n                                     FROM   oft_conduta \n                                     WHERE  nr_seq_consulta = a.nr_seq_consulta) \n               AND a.qt_periodo IS NOT NULL) AS retorno_em, \n       (SELECT a.nm_usuario_orig \n        FROM   agenda_paciente a, \n               agenda x \n        WHERE  a.cd_agenda = x.cd_agenda \n               AND a.dt_agenda > Obter_data_entrada(m.nr_atendimento) \n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica \n               AND Obter_tipo_agenda(a.cd_agenda) = 2 \n               AND ROWNUM <= 1) AS usuario, \n       Substr((SELECT Listagg(Obter_desc_procedimento(b.cd_procedimento, \n                              b.ie_origem_proced) \n                              || ' Quantidade = ' \n                              || b.qt_exame, ' ;') \n                        within GROUP (ORDER BY \n                        Obter_desc_procedimento(b.cd_procedimento, \n                        b.ie_origem_proced)) \n               FROM   pedido_exame_externo_item b \n                      inner join proc_interno c \n                              ON c.nr_sequencia = b.nr_proc_interno \n                      inner join pedido_exame_externo c \n                              ON c.nr_sequencia = b.nr_seq_pedido \n               WHERE  c.nr_seq_consulta = m.nr_seq_consulta \n                      AND c.ie_situacao = 'A'), 1, 1000) AS procedimentos, \n       '' sigla_unidade, \n       '' marca,\n       substr(m.conduta,1,1000) as conduta\nFROM   (SELECT a.nr_atendimento, \n               a.cd_pessoa_fisica, \n               a.cd_medico, \n               Obter_nome_pf(a.cd_medico) nm_medico, \n               a.nr_sequencia             nr_seq_consulta, \n               a.cd_estabelecimento,\n               '' as conduta\n        FROM   oft_consulta a \n        UNION \n        SELECT a.nr_atendimento, \n               a.cd_pessoa_fisica, \n               a.cd_medico, \n               Obter_nome_pf(a.cd_medico) nm_medico, \n               a.nr_sequencia             nr_seq_consulta, \n               a.cd_estabelecimento,\n               c.conduta\n        FROM   oft_consulta a \n               left join (SELECT Count(1) nr_conduta, \n                                 nr_seq_consulta \n                          FROM   oft_conduta \n                          GROUP  BY nr_seq_consulta) b \n                      ON b.nr_seq_consulta = a.nr_sequencia \n               left join (SELECT a.nr_seq_consulta, b.ds_resultado as conduta,\n                                 Count(1) nr_encaminhamento \n                          FROM   med_avaliacao_paciente a \n                                 inner join med_avaliacao_result b \n                                         ON b.nr_seq_avaliacao = a.nr_sequencia \n                          WHERE  a.nr_seq_tipo_avaliacao = 34 \n                                 AND b.nr_seq_item IN ( 456, 457, 458 ) \n                          GROUP  BY a.nr_seq_consulta, b.ds_resultado ) c \n                      ON c.nr_seq_consulta = a.nr_sequencia \n               left join (SELECT nr_seq_consulta, \n                                 Count(1) nr_procedimento \n                          FROM   pedido_exame_externo \n                          WHERE  ie_situacao = 'A' \n                          GROUP  BY nr_seq_consulta) d \n                      ON d.nr_seq_consulta = a.nr_sequencia \n                         AND ( ( Nvl(b.nr_conduta, 0) > 0 ) \n                                OR ( Nvl(c.nr_encaminhamento, 0) > 0 ) \n                                OR ( Nvl(d.nr_procedimento, 0) > 0 ) )) m \n       inner join (SELECT cd_pessoa_fisica, \n                          nm_pessoa_fisica, \n                          nr_cel, nr_cel2, nr_tel,\n                          nr_prontuario, \n                          ds_email \n                   FROM   (SELECT x.cd_pessoa_fisica, \n                                  Initcap(x.nm_pessoa_fisica) nm_pessoa_fisica, \n                                  x.nr_prontuario, \n                                  x.nr_telefone_celular       AS nr_cel, \n                                  y.nr_telefone_celular       AS nr_cel2, \n                                  y.nr_telefone               AS nr_tel, \n                                  y.ds_email \n                           FROM   pessoa_fisica x \n                                  left join compl_pessoa_fisica y ON y.cd_pessoa_fisica = x.cd_pessoa_fisica AND y.ie_tipo_complemento = 1 \n                           WHERE  x.nr_telefone_celular IS NOT NULL \n                                   OR y.nr_telefone_celular IS NOT NULL \n                                   OR y.nr_telefone IS NOT NULL)) n \n               ON n.cd_pessoa_fisica = m.cd_pessoa_fisica \nWHERE  NOT EXISTS (SELECT a.dt_agenda, \n                          a.cd_pessoa_fisica \n                   FROM   agenda_paciente a \n                   WHERE  Obter_tipo_agenda(a.cd_agenda) = 2 \n                          AND a.cd_pessoa_fisica = m.cd_pessoa_fisica \n                          AND a.dt_agenda > SYSDATE) \n",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Retornos_Incremental",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "Altera_marca",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Altera Agendas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "sp_UPDATETRADEMARKV2",
							"storedProcedureParameters": {
								"CNPJ_FIELDNAME": {
									"value": "CNPJ",
									"type": "String"
								},
								"INITIALS_FIELDNAME": {
									"value": "SIGLA_UNIDADE",
									"type": "String"
								},
								"MARK_FIELDNAME": {
									"value": "MARCA",
									"type": "String"
								},
								"TABLENAME": {
									"value": "Oft_Consulta_Retorno_Increment",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera_telefones",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Altera_marca",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERTELEPHONEMASK]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"folder": {
					"name": "Atendimento/Retornos"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Retornos HOB_old')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Altera Agendas",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Tasy HTML5",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERTIPOAGENDAS]",
							"storedProcedureParameters": {
								"FIELDNAME_DEST": {
									"value": "TIPO_AGENDA",
									"type": "String"
								},
								"FIELDNAME_ORIG": {
									"value": "TIPO_AGENDA",
									"type": "String"
								},
								"TABLENAME": {
									"value": "Oft_Consulta_Retorno_Increment",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Tasy HTML5",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT Obter_nome_estab(Obter_estab_atend(m.nr_atendimento)) AS estabelecimento, \n       Obter_cnpj_estabelecimento(Obter_estab_atend(m.nr_atendimento)) \n       AS cnpj, \n       m.nr_atendimento, \n       n.nr_prontuario, \n       m.cd_pessoa_fisica, \n       n.nm_pessoa_fisica nm_paciente, \n       REPLACE(REPLACE(n.nr_tel,')',''),'(','') AS NR_TEL,\n       REPLACE(REPLACE(n.nr_cel,')',''),'(','') AS NR_CEL,\n       REPLACE(REPLACE(n.nr_cel2,')',''),'(','') AS NR_CEL2,\n       m.cd_medico, \n       m.nm_medico, \n       n.ds_email, \n       m.nr_seq_consulta, \n       Substr(To_char(Obter_data_entrada(m.nr_atendimento), 'hh24:mi:ss'), 1, 50 ) AS hora, \n       Substr(To_char(Obter_data_entrada(m.nr_atendimento), 'dd/mm/yyyy'), 1, 50 ) AS data_atendimento, \n       Obter_valor_dominio(12, Obter_tipo_atendimento(m.nr_atendimento)) AS tipo_atendimento, \n       Substr((SELECT To_char(a.dt_agenda, 'dd/mm/yyyy') \n               FROM   agenda_paciente a, \n                      agenda x \n               WHERE  a.cd_agenda = x.cd_agenda \n                      AND a.dt_agenda > Obter_data_entrada(m.nr_atendimento) \n                      AND a.cd_pessoa_fisica = m.cd_pessoa_fisica \n                      AND Obter_tipo_agenda(a.cd_agenda) = 2 \n                      AND ROWNUM <= 1), 1, 50) AS agendado_para_dia, \n       Substr((SELECT To_char(a.hr_inicio, 'hh24:mi:ss') \n               FROM   agenda_paciente a, \n                      agenda x \n               WHERE  a.cd_agenda = x.cd_agenda \n                      AND a.dt_agenda > Obter_data_entrada(m.nr_atendimento) \n                      AND a.cd_pessoa_fisica = m.cd_pessoa_fisica \n                      AND ROWNUM <= 1), 1, 50) AS agendado_para_hora, \n       (SELECT CASE \n                 WHEN Obter_tipo_agenda(a.cd_agenda) = 2 \n                      AND x.cd_pessoa_fisica IS NULL THEN 2 \n                 WHEN Obter_tipo_agenda(a.cd_agenda) = 2 \n                      AND x.cd_pessoa_fisica IS NOT NULL THEN 3 \n                 WHEN Obter_tipo_agenda(a.cd_agenda) = 1 THEN 1 \n               END tipo_agenda \n        FROM   agenda_paciente a, \n               agenda x \n        WHERE  a.cd_agenda = x.cd_agenda \n               AND a.dt_agenda > Obter_data_entrada(m.nr_atendimento) \n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica \n               AND ROWNUM <= 1 \n               AND a.dt_agenda <> Obter_data_entrada(m.nr_atendimento)) AS tipo_agenda, \n       (SELECT 'Retorno em ' \n               || Lpad(a.qt_periodo, 2, '0') \n               || Decode(a.ie_periodo, 'D', ' Dias', \n                                       a.ie_periodo) ds_periodo \n        FROM   oft_conduta a \n        WHERE  a.nr_seq_consulta = m.nr_seq_consulta \n               AND a.dt_inativacao IS NULL \n               AND a.ie_situacao = 'A' \n               AND a.nr_sequencia = (SELECT Max(nr_sequencia) \n                                     FROM   oft_conduta \n                                     WHERE  nr_seq_consulta = a.nr_seq_consulta) \n               AND a.qt_periodo IS NOT NULL) AS retorno_em, \n       (SELECT a.nm_usuario_orig \n        FROM   agenda_paciente a, \n               agenda x \n        WHERE  a.cd_agenda = x.cd_agenda \n               AND a.dt_agenda > Obter_data_entrada(m.nr_atendimento) \n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica \n               AND Obter_tipo_agenda(a.cd_agenda) = 2 \n               AND ROWNUM <= 1) AS usuario, \n       Substr((SELECT Listagg(Obter_desc_procedimento(b.cd_procedimento, \n                              b.ie_origem_proced) \n                              || ' Quantidade = ' \n                              || b.qt_exame, ' ;') \n                        within GROUP (ORDER BY \n                        Obter_desc_procedimento(b.cd_procedimento, \n                        b.ie_origem_proced)) \n               FROM   pedido_exame_externo_item b \n                      inner join proc_interno c \n                              ON c.nr_sequencia = b.nr_proc_interno \n                      inner join pedido_exame_externo c \n                              ON c.nr_sequencia = b.nr_seq_pedido \n               WHERE  c.nr_seq_consulta = m.nr_seq_consulta \n                      AND c.ie_situacao = 'A'), 1, 1000) AS procedimentos, \n       '' sigla_unidade, \n       '' marca,\n       substr(m.conduta,1,1000) as conduta\nFROM   (SELECT a.nr_atendimento, \n               a.cd_pessoa_fisica, \n               a.cd_medico, \n               Obter_nome_pf(a.cd_medico) nm_medico, \n               a.nr_sequencia             nr_seq_consulta, \n               a.cd_estabelecimento,\n               '' as conduta\n        FROM   oft_consulta a \n        UNION \n        SELECT a.nr_atendimento, \n               a.cd_pessoa_fisica, \n               a.cd_medico, \n               Obter_nome_pf(a.cd_medico) nm_medico, \n               a.nr_sequencia             nr_seq_consulta, \n               a.cd_estabelecimento,\n               c.conduta\n        FROM   oft_consulta a \n               left join (SELECT Count(1) nr_conduta, \n                                 nr_seq_consulta \n                          FROM   oft_conduta \n                          GROUP  BY nr_seq_consulta) b \n                      ON b.nr_seq_consulta = a.nr_sequencia \n               left join (SELECT a.nr_seq_consulta, b.ds_resultado as conduta,\n                                 Count(1) nr_encaminhamento \n                          FROM   med_avaliacao_paciente a \n                                 inner join med_avaliacao_result b \n                                         ON b.nr_seq_avaliacao = a.nr_sequencia \n                          WHERE  a.nr_seq_tipo_avaliacao = 34 \n                                 AND b.nr_seq_item IN ( 456, 457, 458 ) \n                          GROUP  BY a.nr_seq_consulta, b.ds_resultado ) c \n                      ON c.nr_seq_consulta = a.nr_sequencia \n               left join (SELECT nr_seq_consulta, \n                                 Count(1) nr_procedimento \n                          FROM   pedido_exame_externo \n                          WHERE  ie_situacao = 'A' \n                          GROUP  BY nr_seq_consulta) d \n                      ON d.nr_seq_consulta = a.nr_sequencia \n                         AND ( ( Nvl(b.nr_conduta, 0) > 0 ) \n                                OR ( Nvl(c.nr_encaminhamento, 0) > 0 ) \n                                OR ( Nvl(d.nr_procedimento, 0) > 0 ) )) m \n       inner join (SELECT cd_pessoa_fisica, \n                          nm_pessoa_fisica, \n                          nr_cel, nr_cel2, nr_tel,\n                          nr_prontuario, \n                          ds_email \n                   FROM   (SELECT x.cd_pessoa_fisica, \n                                  Initcap(x.nm_pessoa_fisica) nm_pessoa_fisica, \n                                  x.nr_prontuario, \n                                  x.nr_telefone_celular       AS nr_cel, \n                                  y.nr_telefone_celular       AS nr_cel2, \n                                  y.nr_telefone               AS nr_tel, \n                                  y.ds_email \n                           FROM   pessoa_fisica x \n                                  left join compl_pessoa_fisica y ON y.cd_pessoa_fisica = x.cd_pessoa_fisica AND y.ie_tipo_complemento = 1 \n                           WHERE  x.nr_telefone_celular IS NOT NULL \n                                   OR y.nr_telefone_celular IS NOT NULL \n                                   OR y.nr_telefone IS NOT NULL)) n \n               ON n.cd_pessoa_fisica = m.cd_pessoa_fisica \nWHERE  NOT EXISTS (SELECT a.dt_agenda, \n                          a.cd_pessoa_fisica \n                   FROM   agenda_paciente a \n                   WHERE  Obter_tipo_agenda(a.cd_agenda) = 2 \n                          AND a.cd_pessoa_fisica = m.cd_pessoa_fisica \n                          AND a.dt_agenda > SYSDATE) and m.conduta is not null",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Retornos_Incremental",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "Altera_marca",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Altera Agendas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "sp_UPDATETRADEMARKV2",
							"storedProcedureParameters": {
								"CNPJ_FIELDNAME": {
									"value": "CNPJ",
									"type": "String"
								},
								"INITIALS_FIELDNAME": {
									"value": "SIGLA_UNIDADE",
									"type": "String"
								},
								"MARK_FIELDNAME": {
									"value": "MARCA",
									"type": "String"
								},
								"TABLENAME": {
									"value": "Oft_Consulta_Retorno_Increment",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"folder": {
					"name": "Atendimento/Retornos"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Retornos Incremental')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Tasy Sadalla",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT \n       Obter_nome_estab(Obter_estab_atend(m.nr_atendimento))       AS \n       estabelecimento, \n       obter_cnpj_estabelecimento(Obter_estab_atend(m.nr_atendimento)) as cnpj,\n       m.nr_atendimento, \n       n.nr_prontuario, \n       m.cd_pessoa_fisica, \n       n.nm_pessoa_fisica                                          nm_paciente, \n       n.nr_tel, \n       m.cd_medico, \n       m.nm_medico, \n       n.ds_email, \n       m.nr_seq_consulta, \n       substr(to_char(obter_data_entrada(m.nr_atendimento), 'hh24:mi:ss'),1,50)as hora,\n       substr(to_char(obter_data_entrada(m.nr_atendimento),'dd/mm/yyyy'),1,50) AS data_atendimento,\n       obter_valor_dominio(12,obter_tipo_atendimento(m.nr_atendimento)) as tipo_atendimento,\n               \n       (SELECT to_char(a.dt_agenda, 'dd/mm/yyyy')\n        FROM   agenda_consulta a, \n               agenda x \n        WHERE  a.cd_agenda = x.cd_agenda \n               AND trunc(a.dt_agenda) > trunc(obter_data_entrada(m.nr_atendimento))\n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica \n               AND ROWNUM <= 1) AS \n       agendado_para_dia, \n       \n       substr((\n        SELECT to_char(a.dt_agenda, 'hh24:mi:ss')\n        FROM agenda_consulta a\n            , agenda x\n        WHERE a.cd_agenda = x.cd_agenda\n               AND trunc(a.dt_agenda) > trunc(obter_data_entrada(m.nr_atendimento))\n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica\n               AND ROWNUM <= 1),1,255) AS agendado_para_hora,\n        \n        (SELECT case when obter_tipo_agenda(a.cd_agenda) = 2 and x.cd_pessoa_fisica is null then 2\n                     when obter_tipo_agenda(a.cd_agenda) = 2 and x.cd_pessoa_fisica is not null then 3\n                     when obter_tipo_agenda(a.cd_agenda) = 1 then 1 end tipo_agenda\n                                  \n        FROM agenda_paciente a\n            , agenda x\n        WHERE a.cd_agenda = x.cd_agenda\n            AND a.dt_agenda > obter_data_entrada(m.nr_atendimento)\n            AND a.cd_pessoa_fisica = m.cd_pessoa_fisica\n            AND ROWNUM <= 1\n            AND a.dt_agenda <> obter_data_entrada(m.nr_atendimento)\n        ) AS tipo_agenda,\n        \n        (select o.ds_retorno from oft_retorno o where o.nr_sequencia = m.nr_seq_retorno) AS retorno_em, \n       \n       (SELECT a.nm_usuario_orig \n        FROM   agenda_paciente a, \n               agenda x \n        WHERE  a.cd_agenda = x.cd_agenda \n               AND a.dt_agenda > Obter_data_entrada(m.nr_atendimento) \n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica \n               AND Obter_tipo_agenda(a.cd_agenda) = 2 \n               AND ROWNUM <= 1)                                    AS usuario, \n               \n       (SELECT Listagg(Obter_desc_procedimento(b.cd_procedimento, \n                       b.ie_origem_proced) \n                       || ' Quantidade = ' \n                       || b.qt_exame, ' ;') \n                 within GROUP (ORDER BY \n                 Obter_desc_procedimento(b.cd_procedimento, \n                 b.ie_origem_proced)) \n        FROM   pedido_exame_externo_item b \n               inner join proc_interno c \n                       ON c.nr_sequencia = b.nr_proc_interno \n               inner join pedido_exame_externo c \n                       ON c.nr_sequencia = b.nr_seq_pedido \n        WHERE  c.nr_seq_consulta = m.nr_seq_consulta \n               AND c.ie_situacao = 'A')                            AS \n       procedimentos,\n       '' SIGLA_UNIDADE,\n       '' MARCA\nFROM   (SELECT a.nr_atendimento, \n               obter_pessoa_atendimento(a.nr_atendimento, 'C') as cd_pessoa_fisica, \n               a.cd_profissional as cd_medico, \n               Obter_nome_pf(a.cd_profissional) nm_medico, \n               a.nr_sequencia             nr_seq_consulta, \n               obter_estab_atend(a.nr_atendimento) as cd_estabelecimento,\n               a.nr_seq_retorno\n        FROM   oft_consulta_medica a \n                                     ) m \n       inner join (SELECT cd_pessoa_fisica, \n                          nm_pessoa_fisica, \n                          Nvl(Nvl(nr_cel, nr_cel2), nr_tel) nr_tel, \n                          nr_prontuario, \n                          ds_email \n                   FROM   (SELECT x.cd_pessoa_fisica, \n                                  Initcap(x.nm_pessoa_fisica) \n                                          nm_pessoa_fisica, \n                                  x.nr_prontuario, \nRegexp_replace(Regexp_replace(x.nr_telefone_celular, \n               '[^[:digit:]]'), \nDecode( \nLength(Regexp_replace(x.nr_telefone_celular, \n       '[^[:digit:]]')), 8 \n, \nds_reg_8, \n9, \nds_reg_9, \n10, \nds_reg_10, \nds_reg_11) \n, \nDecode(Length(Regexp_replace(x.nr_telefone_celular, \n              '[^[:digit:]]')), 8, \nds_for_8 \n, \n9, \nds_for_9, \n10 \n        , \nds_for_10, \nds_for_11) \n) \n        nr_cel, \nRegexp_replace(Regexp_replace(y.nr_telefone_celular, \n               '[^[:digit:]]'), \nDecode( \nLength(Regexp_replace(y.nr_telefone_celular, \n       '[^[:digit:]]')), 8 \n, \nds_reg_8, \n9, \nds_reg_9, \n10, \nds_reg_10, \nds_reg_11) \n, \nDecode(Length(Regexp_replace(y.nr_telefone_celular, \n              '[^[:digit:]]')), 8, \nds_for_8 \n, \n9, \nds_for_9, \n10 \n        , \nds_for_10, \nds_for_11) \n) \n        nr_cel2, \nRegexp_replace(Regexp_replace(y.nr_telefone, \n               '[^[:digit:]]'), \nDecode(Length(Regexp_replace(y.nr_telefone, \n              '[^[:digit:]]')), 8, \nds_reg_8, \n9, ds_reg_9, \n10, ds_reg_10, \nds_reg_11), \nDecode(Length(Regexp_replace(y.nr_telefone, \n              '[^[:digit:]]')), 8, \nds_for_8, \n9, \nds_for_9, \n10 \n, \nds_for_10, \nds_for_11) \n        ) nr_tel, \ny.ds_email \nFROM   pessoa_fisica x \nleft join compl_pessoa_fisica y \n       ON y.cd_pessoa_fisica = x.cd_pessoa_fisica \n          AND y.ie_tipo_complemento = 1, \n(SELECT '([0-9]{4})([0-9]{4})'           ds_reg_8, \n        '\\1-\\2'                          ds_for_8, \n        '([0-9]{5})([0-9]{4})'           ds_reg_9, \n        '\\1-\\2'                          ds_for_9, \n        '([0-9]{2})([0-9]{4})([0-9]{4})' ds_reg_10, \n        '(\\1) \\2-\\3'                     ds_for_10, \n        '([0-9]{2})([0-9]{5})([0-9]{4})' ds_reg_11, \n        '(\\1) \\2-\\3'                     ds_for_11 \n FROM   dual) z \nWHERE  x.nr_telefone_celular IS NOT NULL \n OR y.nr_telefone_celular IS NOT NULL \n OR y.nr_telefone IS NOT NULL)) n \nON n.cd_pessoa_fisica = m.cd_pessoa_fisica \nWHERE  NOT EXISTS (SELECT a.dt_agenda, \n                          a.cd_pessoa_fisica \n                   FROM   agenda_consulta a \n                   where a.cd_pessoa_fisica = m.cd_pessoa_fisica\n                          AND a.dt_agenda > SYSDATE) \nAND ROWNUM < 50",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "ASQL_TB_RetornosTMP",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "ALTERA AGENDAS",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Tasy Sadalla",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Tasy HTML5",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERTIPOAGENDAS]",
							"storedProcedureParameters": {
								"FIELDNAME_DEST": {
									"value": "TIPO_AGENDA",
									"type": "String"
								},
								"FIELDNAME_ORIG": {
									"value": "TIPO_AGENDA",
									"type": "String"
								},
								"TABLENAME": {
									"value": "Oft_Consulta_Retorno_Increment_temp",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ALTERA_MARCA",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ALTERA AGENDAS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "sp_UPDATETRADEMARKV2",
							"storedProcedureParameters": {
								"CNPJ_FIELDNAME": {
									"value": "CNPJ",
									"type": "String"
								},
								"INITIALS_FIELDNAME": {
									"value": "SIGLA_UNIDADE",
									"type": "String"
								},
								"MARK_FIELDNAME": {
									"value": "MARCA",
									"type": "String"
								},
								"TABLENAME": {
									"value": "Oft_Consulta_Retorno_Increment_temp",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Temp_para_Tabela",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ALTERA_MARCA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[INSERTNEWRETURNS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Tasy HTML5",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT \n       Obter_nome_estab(Obter_estab_atend(m.nr_atendimento)) AS \n       estabelecimento, \n       m.nr_atendimento, \n       n.nr_prontuario, \n       m.cd_pessoa_fisica, \n       n.nm_pessoa_fisica  nm_paciente, \n       n.nr_tel, \n       m.cd_medico, \n       m.nm_medico, \n       n.ds_email, \n       m.nr_seq_consulta, \n       substr(to_char(obter_data_entrada(m.nr_atendimento), 'hh24:mi:ss'),1,50)as hora,\n       substr(to_char(obter_data_entrada(m.nr_atendimento),'dd/mm/yyyy'),1,50) AS data_atendimento,\n       obter_valor_dominio(12,obter_tipo_atendimento(m.nr_atendimento)) as tipo_atendimento,\n       \n       substr((SELECT to_char(a.dt_agenda,'dd/mm/yyyy')\n        FROM   agenda_paciente a, \n               agenda x \n        WHERE  a.cd_agenda = x.cd_agenda \n               AND a.dt_agenda > Obter_data_entrada(m.nr_atendimento) \n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica \n               AND Obter_tipo_agenda(a.cd_agenda) = 2 \n               AND ROWNUM <= 1),1,50)                                  AS \n       agendado_para_dia, \n       \n       substr((\n        SELECT to_char(a.hr_inicio, 'hh24:mi:ss')\n        FROM agenda_paciente a\n            , agenda x\n        WHERE a.cd_agenda = x.cd_agenda\n               AND a.dt_agenda > obter_data_entrada(m.nr_atendimento)\n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica\n               AND ROWNUM <= 1\n        ),1,50) AS agendado_para_hora,\n        \n        (SELECT case when obter_tipo_agenda(a.cd_agenda) = 2 and x.cd_pessoa_fisica is null then 2\n                     when obter_tipo_agenda(a.cd_agenda) = 2 and x.cd_pessoa_fisica is not null then 3\n                     when obter_tipo_agenda(a.cd_agenda) = 1 then 1 end tipo_agenda\n                                  \n        FROM agenda_paciente a\n            , agenda x\n        WHERE a.cd_agenda = x.cd_agenda\n            AND a.dt_agenda > obter_data_entrada(m.nr_atendimento)\n            AND a.cd_pessoa_fisica = m.cd_pessoa_fisica\n            AND ROWNUM <= 1\n            AND a.dt_agenda <> obter_data_entrada(m.nr_atendimento)\n        ) AS tipo_agenda,\n        \n        (SELECT 'Retorno em ' \n               || Lpad(a.qt_periodo, 2, '0') \n               || Decode(a.ie_periodo, 'D', ' Dias', \n                                       a.ie_periodo) ds_periodo \n        FROM   oft_conduta a \n        WHERE  a.nr_seq_consulta = m.nr_seq_consulta \n               AND a.dt_inativacao IS NULL \n               AND a.ie_situacao = 'A' \n               AND a.nr_sequencia = (SELECT Max(nr_sequencia) \n                                     FROM   oft_conduta \n                                     WHERE  nr_seq_consulta = a.nr_seq_consulta) \n        AND a.qt_periodo IS NOT NULL)                       AS retorno_em, \n       \n       (SELECT a.nm_usuario_orig \n        FROM   agenda_paciente a, \n               agenda x \n        WHERE  a.cd_agenda = x.cd_agenda \n               AND a.dt_agenda > Obter_data_entrada(m.nr_atendimento) \n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica \n               AND Obter_tipo_agenda(a.cd_agenda) = 2 \n               AND ROWNUM <= 1)                                    AS usuario, \n               \n       substr((SELECT Listagg(Obter_desc_procedimento(b.cd_procedimento, \n                       b.ie_origem_proced) \n                       || ' Quantidade = ' \n                       || b.qt_exame, ' ;') \n                 within GROUP (ORDER BY \n                 Obter_desc_procedimento(b.cd_procedimento, \n                 b.ie_origem_proced)) \n        FROM   pedido_exame_externo_item b \n               inner join proc_interno c \n                       ON c.nr_sequencia = b.nr_proc_interno \n               inner join pedido_exame_externo c \n                       ON c.nr_sequencia = b.nr_seq_pedido \n        WHERE  c.nr_seq_consulta = m.nr_seq_consulta \n               AND c.ie_situacao = 'A'),1,1000)                        AS \n       procedimentos,\n       '' SIGLA_UNIDADE,\n       '' MARCA\nFROM   (SELECT a.nr_atendimento, \n               a.cd_pessoa_fisica, \n               a.cd_medico, \n               Obter_nome_pf(a.cd_medico) nm_medico, \n               a.nr_sequencia             nr_seq_consulta, \n               a.cd_estabelecimento \n        FROM   oft_consulta a \n        UNION \n        SELECT a.nr_atendimento, \n               a.cd_pessoa_fisica, \n               a.cd_medico, \n               Obter_nome_pf(a.cd_medico) nm_medico, \n               a.nr_sequencia             nr_seq_consulta, \n               a.cd_estabelecimento \n        FROM   oft_consulta a \n               left join (SELECT Count(1) nr_conduta, \n                                 nr_seq_consulta \n                          FROM   oft_conduta \n                          GROUP  BY nr_seq_consulta) b \n                      ON b.nr_seq_consulta = a.nr_sequencia \n               left join (SELECT a.nr_seq_consulta, \n                                 Count(1) nr_encaminhamento \n                          FROM   med_avaliacao_paciente a \n                                 inner join med_avaliacao_result b \n                                         ON b.nr_seq_avaliacao = a.nr_sequencia \n                          WHERE  a.nr_seq_tipo_avaliacao = 34 \n                                 AND b.nr_seq_item IN ( 456, 457, 458 ) \n                          GROUP  BY a.nr_seq_consulta) c \n                      ON c.nr_seq_consulta = a.nr_sequencia \n               left join (SELECT nr_seq_consulta, \n                                 Count(1) nr_procedimento \n                          FROM   pedido_exame_externo \n                          WHERE  ie_situacao = 'A' \n                          GROUP  BY nr_seq_consulta) d \n                      ON d.nr_seq_consulta = a.nr_sequencia \n               AND ( ( Nvl(b.nr_conduta, 0) > 0 ) \n                      OR ( Nvl(c.nr_encaminhamento, 0) > 0 ) \n                      OR ( Nvl(d.nr_procedimento, 0) > 0 ) )) m \n       inner join (SELECT cd_pessoa_fisica, \n                          nm_pessoa_fisica, \n                          Nvl(Nvl(nr_cel, nr_cel2), nr_tel) nr_tel, \n                          nr_prontuario, \n                          ds_email \n                   FROM   (SELECT x.cd_pessoa_fisica, \n                                  Initcap(x.nm_pessoa_fisica) \n                                          nm_pessoa_fisica, \n                                  x.nr_prontuario, \nRegexp_replace(Regexp_replace(x.nr_telefone_celular, \n               '[^[:digit:]]'), \nDecode( \nLength(Regexp_replace(x.nr_telefone_celular, \n       '[^[:digit:]]')), 8 \n, \nds_reg_8, \n9, \nds_reg_9, \n10, \nds_reg_10, \nds_reg_11) \n, \nDecode(Length(Regexp_replace(x.nr_telefone_celular, \n              '[^[:digit:]]')), 8, \nds_for_8 \n, \n9, \nds_for_9, \n10 \n        , \nds_for_10, \nds_for_11) \n) \n        nr_cel, \nRegexp_replace(Regexp_replace(y.nr_telefone_celular, \n               '[^[:digit:]]'), \nDecode( \nLength(Regexp_replace(y.nr_telefone_celular, \n       '[^[:digit:]]')), 8 \n, \nds_reg_8, \n9, \nds_reg_9, \n10, \nds_reg_10, \nds_reg_11) \n, \nDecode(Length(Regexp_replace(y.nr_telefone_celular, \n              '[^[:digit:]]')), 8, \nds_for_8 \n, \n9, \nds_for_9, \n10 \n        , \nds_for_10, \nds_for_11) \n) \n        nr_cel2, \nRegexp_replace(Regexp_replace(y.nr_telefone, \n               '[^[:digit:]]'), \nDecode(Length(Regexp_replace(y.nr_telefone, \n              '[^[:digit:]]')), 8, \nds_reg_8, \n9, ds_reg_9, \n10, ds_reg_10, \nds_reg_11), \nDecode(Length(Regexp_replace(y.nr_telefone, \n              '[^[:digit:]]')), 8, \nds_for_8, \n9, \nds_for_9, \n10 \n, \nds_for_10, \nds_for_11) \n        ) nr_tel, \ny.ds_email \nFROM   pessoa_fisica x \nleft join compl_pessoa_fisica y \n       ON y.cd_pessoa_fisica = x.cd_pessoa_fisica \n          AND y.ie_tipo_complemento = 1, \n(SELECT '([0-9]{4})([0-9]{4})'           ds_reg_8, \n        '\\1-\\2'                          ds_for_8, \n        '([0-9]{5})([0-9]{4})'           ds_reg_9, \n        '\\1-\\2'                          ds_for_9, \n        '([0-9]{2})([0-9]{4})([0-9]{4})' ds_reg_10, \n        '(\\1) \\2-\\3'                     ds_for_10, \n        '([0-9]{2})([0-9]{5})([0-9]{4})' ds_reg_11, \n        '(\\1) \\2-\\3'                     ds_for_11 \n FROM   dual) z \nWHERE  x.nr_telefone_celular IS NOT NULL \n OR y.nr_telefone_celular IS NOT NULL\n OR y.nr_telefone IS NOT NULL)) n \nON n.cd_pessoa_fisica = m.cd_pessoa_fisica \nWHERE  NOT EXISTS (SELECT a.dt_agenda, \n                          a.cd_pessoa_fisica \n                   FROM   agenda_paciente a \n                   WHERE  Obter_tipo_agenda(a.cd_agenda) = 2 \n                          AND a.cd_pessoa_fisica = m.cd_pessoa_fisica)\nAND ROWNUM < 50",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "ASQL_TB_RetornosTMP",
								"type": "DatasetReference"
							}
						]
					}
				],
				"folder": {
					"name": "Atendimento/Retornos"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Retornos Sadalla')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Tasy Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT \n       Obter_nome_estab(Obter_estab_atend(m.nr_atendimento))       AS estabelecimento, \n       obter_cnpj_estabelecimento(Obter_estab_atend(m.nr_atendimento)) as cnpj,\n       m.nr_atendimento, \n       n.nr_prontuario, \n       m.cd_pessoa_fisica, \n       n.nm_pessoa_fisica as nm_paciente, \n       replace(LTRIM(translate(n.nr_tel, translate(n.nr_tel, '1234567890', ' ') , ' ')),' ','') as NR_TEL,\n       replace(LTRIM(translate(n.nr_cel, translate(n.nr_cel, '1234567890', ' ') , ' ')),' ','') as NR_CEL,\n       replace(LTRIM(translate(n.nr_cel2, translate(n.nr_cel2, '1234567890', ' ') , ' ')),' ','') as NR_CEL2,\n       m.cd_medico, \n       m.nm_medico, \n       substr(n.ds_email,1,100) as ds_email, \n       m.nr_seq_consulta, \n       substr(to_char(obter_data_entrada(m.nr_atendimento), 'hh24:mi:ss'),1,50)as hora,\n       substr(to_char(obter_data_entrada(m.nr_atendimento),'dd/mm/yyyy'),1,50) AS data_atendimento,\n       obter_valor_dominio(12,obter_tipo_atendimento(m.nr_atendimento)) as tipo_atendimento,\n       \n       (\n        SELECT to_char(a.dt_agenda, 'hh24:mi:ss')\n        FROM agenda_consulta a\n            , agenda x\n        WHERE a.cd_agenda = x.cd_agenda\n               AND trunc(a.dt_agenda) > trunc(obter_data_entrada(m.nr_atendimento))\n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica\n               AND ROWNUM <= 1\n               AND a.dt_agenda <> obter_data_entrada(m.nr_atendimento)) AS agendado_para_hora,\n               \n        (SELECT to_char(a.dt_agenda, 'dd/mm/yyyy')\n        FROM   agenda_consulta a, \n               agenda x \n        WHERE  a.cd_agenda = x.cd_agenda \n               AND trunc(a.dt_agenda) > trunc(obter_data_entrada(m.nr_atendimento))\n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica \n               AND ROWNUM <= 1\n               AND a.dt_agenda <> obter_data_entrada(m.nr_atendimento)) AS \n       agendado_para_dia, \n        \n        (SELECT obter_tipo_agenda(a.cd_agenda) as tipo_agenda                     \n        FROM agenda_consulta a\n            , agenda x\n        WHERE a.cd_agenda = x.cd_agenda\n            AND trunc(a.dt_agenda) > trunc(obter_data_entrada(m.nr_atendimento))\n            AND a.cd_pessoa_fisica = m.cd_pessoa_fisica\n            AND ROWNUM <= 1\n            AND a.dt_agenda <> obter_data_entrada(m.nr_atendimento)\n        ) AS tipo_agenda,\n        \n        (select o.ds_retorno from oft_retorno o where o.nr_sequencia = m.nr_seq_retorno) AS retorno_em, \n       \n       (SELECT a.nm_usuario_origem\n        FROM   agenda_consulta a, \n               agenda x \n        WHERE  a.cd_agenda = x.cd_agenda \n               AND trunc(a.dt_agenda) > trunc(obter_data_entrada(m.nr_atendimento))\n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica\n               AND ROWNUM <= 1\n               AND a.dt_agenda <> obter_data_entrada(m.nr_atendimento)) AS usuario, \n               \n       (SELECT 'Consulta Oftalmologica Completa'\n        FROM   agenda_consulta a, \n               agenda x \n        WHERE  a.cd_agenda = x.cd_agenda\n               AND trunc(a.dt_agenda) > trunc(obter_data_entrada(m.nr_atendimento))\n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica\n               AND ROWNUM <= 1\n               AND a.dt_agenda <> obter_data_entrada(m.nr_atendimento)) as procedimentos,\n       \n       '' SIGLA_UNIDADE,\n       '' MARCA,\n       substr(m.conduta,1,1000) as conduta\n       \nFROM   (SELECT a.nr_atendimento, \n               obter_pessoa_atendimento(a.nr_atendimento, 'C') as cd_pessoa_fisica, \n               a.cd_profissional as cd_medico, \n               Obter_nome_pf(a.cd_profissional) nm_medico, \n               a.nr_sequencia             nr_seq_consulta, \n               obter_estab_atend(a.nr_atendimento) as cd_estabelecimento,\n               a.nr_seq_retorno,\n               a.ds_conduta as conduta\n        FROM   oft_consulta_medica a,\n               atendimento_paciente b\n        where  a.nr_atendimento = b.nr_atendimento\n                                     ) m \n       inner join (SELECT cd_pessoa_fisica, \n                          nm_pessoa_fisica, \n                          nr_cel,\n                          nr_cel2,\n                          nr_tel, \n                          nr_prontuario, \n                          ds_email \n                   FROM   (SELECT x.cd_pessoa_fisica, \n                                  Initcap(x.nm_pessoa_fisica) nm_pessoa_fisica, \n                                  x.nr_prontuario, \n                                  x.nr_ddd_celular ||''|| x.nr_telefone_celular       AS nr_cel, \n                                  y.nr_ddd_celular ||''|| y.nr_telefone_celular       AS nr_cel2, \n                                  y.nr_ddd_telefone ||''|| y.nr_telefone              AS nr_tel, \n                                  y.ds_email \nFROM   pessoa_fisica x \n     left join compl_pessoa_fisica y \n       ON y.cd_pessoa_fisica = x.cd_pessoa_fisica \n          AND y.ie_tipo_complemento = 1\nWHERE  x.nr_telefone_celular IS NOT NULL \n OR y.nr_telefone_celular IS NOT NULL \n OR y.nr_telefone IS NOT NULL)) n \n ON n.cd_pessoa_fisica = m.cd_pessoa_fisica \nWHERE  NOT EXISTS (SELECT a.dt_agenda, \n                          a.cd_pessoa_fisica \n                   FROM   agenda_consulta a \n                   where a.cd_pessoa_fisica = m.cd_pessoa_fisica\n                   AND a.dt_agenda > SYSDATE) ",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Retornos_Incremental",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "Truncate table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_TRUNCATETABLEDEFAUT)]",
							"storedProcedureParameters": {
								"TABLENAME": {
									"value": "Oft_Consulta_Retorno_Increment",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"folder": {
					"name": "Atendimento/Retornos"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Retornos Sadalla_old')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Tasy Sadalla",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT \n       Obter_nome_estab(Obter_estab_atend(m.nr_atendimento))       AS estabelecimento, \n       obter_cnpj_estabelecimento(Obter_estab_atend(m.nr_atendimento)) as cnpj,\n       m.nr_atendimento, \n       n.nr_prontuario, \n       m.cd_pessoa_fisica, \n       n.nm_pessoa_fisica as nm_paciente, \n       substr(n.nr_tel,1,100) as nr_tel,\n       substr(n.nr_cel,1,100) as nr_cel,\n       substr(n.nr_cel2,1,100) as nr_cel2,\n       m.cd_medico, \n       m.nm_medico, \n       substr(n.ds_email,1,100) as ds_email, \n       m.nr_seq_consulta, \n       substr(to_char(obter_data_entrada(m.nr_atendimento), 'hh24:mi:ss'),1,50)as hora,\n       substr(to_char(obter_data_entrada(m.nr_atendimento),'dd/mm/yyyy'),1,50) AS data_atendimento,\n       obter_valor_dominio(12,obter_tipo_atendimento(m.nr_atendimento)) as tipo_atendimento,\n       \n       (\n        SELECT to_char(a.dt_agenda, 'hh24:mi:ss')\n        FROM agenda_consulta a\n            , agenda x\n        WHERE a.cd_agenda = x.cd_agenda\n               AND trunc(a.dt_agenda) > trunc(obter_data_entrada(m.nr_atendimento))\n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica\n               AND ROWNUM <= 1\n               AND a.dt_agenda <> obter_data_entrada(m.nr_atendimento)) AS agendado_para_hora,\n               \n        (SELECT to_char(a.dt_agenda, 'dd/mm/yyyy')\n        FROM   agenda_consulta a, \n               agenda x \n        WHERE  a.cd_agenda = x.cd_agenda \n               AND trunc(a.dt_agenda) > trunc(obter_data_entrada(m.nr_atendimento))\n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica \n               AND ROWNUM <= 1\n               AND a.dt_agenda <> obter_data_entrada(m.nr_atendimento)) AS \n       agendado_para_dia, \n        \n        (SELECT obter_tipo_agenda(a.cd_agenda) as tipo_agenda                     \n        FROM agenda_consulta a\n            , agenda x\n        WHERE a.cd_agenda = x.cd_agenda\n            AND trunc(a.dt_agenda) > trunc(obter_data_entrada(m.nr_atendimento))\n            AND a.cd_pessoa_fisica = m.cd_pessoa_fisica\n            AND ROWNUM <= 1\n            AND a.dt_agenda <> obter_data_entrada(m.nr_atendimento)\n        ) AS tipo_agenda,\n        \n        (select o.ds_retorno from oft_retorno o where o.nr_sequencia = m.nr_seq_retorno) AS retorno_em, \n       \n       (SELECT a.nm_usuario_origem\n        FROM   agenda_consulta a, \n               agenda x \n        WHERE  a.cd_agenda = x.cd_agenda \n               AND trunc(a.dt_agenda) > trunc(obter_data_entrada(m.nr_atendimento))\n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica\n               AND ROWNUM <= 1\n               AND a.dt_agenda <> obter_data_entrada(m.nr_atendimento)) AS usuario, \n               \n       (SELECT 'Consulta Oftalmologica Completa'\n        FROM   agenda_consulta a, \n               agenda x \n        WHERE  a.cd_agenda = x.cd_agenda\n               AND trunc(a.dt_agenda) > trunc(obter_data_entrada(m.nr_atendimento))\n               AND a.cd_pessoa_fisica = m.cd_pessoa_fisica\n               AND ROWNUM <= 1\n               AND a.dt_agenda <> obter_data_entrada(m.nr_atendimento)) as procedimentos,\n       \n       '' SIGLA_UNIDADE,\n       '' MARCA,\n       substr(m.conduta,1,1000) as conduta\n       \nFROM   (SELECT a.nr_atendimento, \n               obter_pessoa_atendimento(a.nr_atendimento, 'C') as cd_pessoa_fisica, \n               a.cd_profissional as cd_medico, \n               Obter_nome_pf(a.cd_profissional) nm_medico, \n               a.nr_sequencia             nr_seq_consulta, \n               obter_estab_atend(a.nr_atendimento) as cd_estabelecimento,\n               a.nr_seq_retorno,\n               a.ds_conduta as conduta\n        FROM   oft_consulta_medica a,\n               atendimento_paciente b\n        where  a.nr_atendimento = b.nr_atendimento\n                                     ) m \n       inner join (SELECT cd_pessoa_fisica, \n                          nm_pessoa_fisica, \n                          nr_cel,\n                          nr_cel2,\n                          nr_tel, \n                          nr_prontuario, \n                          ds_email \n                   FROM   (SELECT x.cd_pessoa_fisica, \n                                  Initcap(x.nm_pessoa_fisica) nm_pessoa_fisica, \n                                  x.nr_prontuario, \n                                  x.nr_ddd_celular ||''|| x.nr_telefone_celular       AS nr_cel, \n                                  y.nr_ddd_celular ||''|| y.nr_telefone_celular       AS nr_cel2, \n                                  y.nr_ddd_telefone ||''|| y.nr_telefone              AS nr_tel, \n                                  y.ds_email \nFROM   pessoa_fisica x \n     left join compl_pessoa_fisica y \n       ON y.cd_pessoa_fisica = x.cd_pessoa_fisica \n          AND y.ie_tipo_complemento = 1\nWHERE  x.nr_telefone_celular IS NOT NULL \n OR y.nr_telefone_celular IS NOT NULL \n OR y.nr_telefone IS NOT NULL)) n \n ON n.cd_pessoa_fisica = m.cd_pessoa_fisica \nWHERE  NOT EXISTS (SELECT a.dt_agenda, \n                          a.cd_pessoa_fisica \n                   FROM   agenda_consulta a \n                   where a.cd_pessoa_fisica = m.cd_pessoa_fisica\n                   AND a.dt_agenda > SYSDATE) ",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Retornos_Incremental",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "Altera Agendas",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Tasy Sadalla",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERTIPOAGENDAS]",
							"storedProcedureParameters": {
								"FIELDNAME_DEST": {
									"value": "TIPO_AGENDA",
									"type": "String"
								},
								"FIELDNAME_ORIG": {
									"value": "TIPO_AGENDA",
									"type": "String"
								},
								"TABLENAME": {
									"value": "Oft_Consulta_Retorno_Increment",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera_marca",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Altera Agendas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "sp_UPDATETRADEMARKV2",
							"storedProcedureParameters": {
								"CNPJ_FIELDNAME": {
									"value": "CNPJ",
									"type": "String"
								},
								"INITIALS_FIELDNAME": {
									"value": "SIGLA_UNIDADE",
									"type": "String"
								},
								"MARK_FIELDNAME": {
									"value": "MARCA",
									"type": "String"
								},
								"TABLENAME": {
									"value": "Oft_Consulta_Retorno_Increment",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"folder": {
					"name": "Atendimento/Retornos"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Workflows Requestia')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Extrai informações específicas para serem processadas nos workflows do Office Flow",
				"activities": [
					{
						"name": "Extract CAPEX",
						"description": "Copy NFD tickets to REQUESTIA_CAPEXNFD table, solving timeout in Microsoft Flow that send weekly mail from sergio.queiroz@opty.com.br account",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_EXTRACTCAPEXREQUESTS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Extract TISS",
						"description": "Copy TISS tickets to specific table, solving timeout in Microsoft Flow that send weekly mail from sergio.queiroz@opty.com.br account",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_EXTRACTTISSREQUESTS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Start",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"folder": {
					"name": "Apoio"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZSQL_TB_Retornos_Incremental_testes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Retornos de consulta"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ESTABELECIMENTO",
						"type": "varchar"
					},
					{
						"name": "CNPJ",
						"type": "varchar"
					},
					{
						"name": "NR_ATENDIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NR_PRONTUARIO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NM_PACIENTE",
						"type": "varchar"
					},
					{
						"name": "NR_TEL",
						"type": "varchar"
					},
					{
						"name": "CD_MEDICO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NM_MEDICO",
						"type": "varchar"
					},
					{
						"name": "DS_EMAIL",
						"type": "varchar"
					},
					{
						"name": "NR_SEQ_CONSULTA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HORA",
						"type": "varchar"
					},
					{
						"name": "DATA_ATENDIMENTO",
						"type": "varchar"
					},
					{
						"name": "TIPO_ATENDIMENTO",
						"type": "varchar"
					},
					{
						"name": "AGENDADO_PARA_HORA",
						"type": "varchar"
					},
					{
						"name": "AGENDADO_PARA_DIA",
						"type": "varchar"
					},
					{
						"name": "TIPO_AGENDA",
						"type": "varchar"
					},
					{
						"name": "RETORNO_EM",
						"type": "varchar"
					},
					{
						"name": "USUARIO",
						"type": "varchar"
					},
					{
						"name": "PROCEDIMENTOS",
						"type": "varchar"
					},
					{
						"name": "SIGLA_UNIDADE",
						"type": "varchar"
					},
					{
						"name": "MARCA",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Oft_Consulta_Retorno_Increment_testes"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 0200 AM')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Criado para executar as consultas no HOSAG",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2019-10-08T03:02:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								5
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 0630 AM')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de pipeline para atualização das informações dos indicadores de Call Center",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Agendas Projesi",
							"type": "PipelineReference"
						}
					},
					{
						"pipelineReference": {
							"referenceName": "Chamados Requestia",
							"type": "PipelineReference"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2019-08-20T15:22:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								9
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Chamados Requestia')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Mondays 0800 AM')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Workflows Requestia",
							"type": "PipelineReference"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2019-10-14T23:00:00.000Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								11
							],
							"weekDays": [
								"Monday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Workflows Requestia')]"
			]
		}
	]
}